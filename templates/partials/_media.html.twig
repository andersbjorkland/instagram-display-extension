{% block stylesheets %}
    <style>

        #instagram-media-wrapper .hidden {
            display: none;
        }

        #instagram-media-container img, #instagram-media-container video {
            max-width: 100%;
        }

        #instagram-media-container {
            width: fit-content;
            margin: auto;

            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;

            justify-content: center;
            align-items: center;
        }

        .instagram-paging-controls {
            position: relative;
            width: fit-content;
            margin: 0.5em auto;
            display: grid;
            grid-template-columns: 6.5em 6.5em;
            gap: 0.5rem;
        }

        #instagram-media-paging-previous {
            grid-column: 1;
            margin-left: auto;
        }
        #instagram-media-paging-controls .button.loading::before {
            position: absolute;
            top: 0;
            left: 0%;
            width: 5%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.3);
            content: "";
            animation: button-loading 2s infinite;
        }

        #instagram-media-paging-next {
            grid-column: 2;
            margin-right: auto;
        }

        .instagram-paging-controls .button {
            width: 100%;
        }

        @keyframes button-loading {
            50% {
                left: 96%;
            }
        }

    </style>
{% endblock %}

<div id="instagram-media-wrapper">

    <div id="instagram-media-container">

    </div>
    <div id="instagram-media-paging-controls" class="instagram-paging-controls">
        <button id="instagram-media-paging-previous" class="button hidden" data-previous="" onclick="handlePreviousButton()">Previous</button>
        <button id="instagram-media-paging-next" class="button hidden" data-next="" onclick="handleNextButton()">Next</button>
    </div>
</div>

<script>
    const container = document.getElementById('instagram-media-container');
    const previousControl = document.getElementById('instagram-media-paging-previous');
    const nextControl = document.getElementById('instagram-media-paging-next');

    const getVideoElement = (video, width = -1) => {
        let source;

        if (video.filepath.length > 0) {
            source = video["filepath"];
        } else {
            source = video["instagram_url"];
        }

        const videoElement = document.createElement("video");
        videoElement.setAttribute("src", source);
        videoElement.setAttribute("controls", "controls");

        if (width > 0) {
            videoElement.setAttribute("width", "" + width);
        }

        return videoElement;
    }

    const getImageElement = (image) => {
        let source;

        if (image.thumbnail.length > 0) {
            source = image["thumbnail"];
        } else {
            source = image["instagram_url"];
        }

        const imageElement = document.createElement("img");
        imageElement.setAttribute("src", source);
        imageElement.setAttribute("alt", "");

        return imageElement;
    }

    const createElementsFromData = (data) => {
        let videoWidth;

        if ("video_width" in data) {
            videoWidth = data["video_width"];
        } else {
            videoWidth = -1;
        }

        if ("media" in data) {
            if (Array.isArray(data.media)) {
                data.media.forEach(item => {
                    if (Object.keys(item).includes("media_type")) {
                        let elementToAppend = null;
                        switch (item["media_type"]) {
                            case "VIDEO":
                                elementToAppend = getVideoElement(item, videoWidth);
                                break;

                            case "IMAGE":
                                elementToAppend = getImageElement(item);
                                break;

                            case "CAROUSEL_ALBUM":
                                elementToAppend = getImageElement(item);
                                break;

                            default:
                                console.log("UNKNOWN MEDIA TYPE: " + item["media_type"]);
                        }

                        if (elementToAppend !== null) {
                            container.appendChild(elementToAppend);
                        }

                    }

                });
            }
        }
    }

    const managePagingControls = (data) => {
        if ("paging" in data) {
            if ("previous" in data.paging) {
                previousControl.classList.remove("hidden");
                previousControl.dataset.previous = data.paging.previous;

            } else {
                previousControl.classList.add("hidden");
                previousControl.dataset.previous = "";
            }

            if ("next" in data.paging) {
                nextControl.classList.remove("hidden");
                nextControl.dataset.next = data.paging.next;
            } else {
                nextControl.classList.add("hidden");
                nextControl.dataset.next = "";
            }
        }
    }
    const clearMedia = () => {

        // As describe in option 2 A: https://stackoverflow.com/questions/3955229/remove-all-child-elements-of-a-dom-node-in-javascript
        while (container.firstChild) {
            container.removeChild(container.lastChild);
        }
    }

    const updateMedia = (query = "") => {

        return fetch('/extensions/instagram-display/media/async' + query)
            .then(result => {
                clearMedia();
                return result.json()
            })
            .then(data => {
                createElementsFromData(data);
                managePagingControls(data);
            });
    }



    const handlePreviousButton = () => {
        const direction = "before";
        const cursor = previousControl.dataset.previous;
        const query = "?direction=" + direction +"&cursor=" + cursor;

        previousControl.disabled = true;
        previousControl.classList.add("loading");
        let loading = updateMedia(query);

        loading.then(() => {
            previousControl.classList.remove("loading");
            previousControl.disabled = false;
        });
    }

    const handleNextButton = () => {
        const direction = "after";
        const cursor = nextControl.dataset.next;
        const query = "?direction=" + direction +"&cursor=" + cursor;

        nextControl.disabled = true;
        nextControl.classList.add("loading");
        let loading = updateMedia(query);

        loading.then(() => {
            nextControl.classList.remove("loading");
            nextControl.disabled = false;
        });
    }

    updateMedia();

</script>